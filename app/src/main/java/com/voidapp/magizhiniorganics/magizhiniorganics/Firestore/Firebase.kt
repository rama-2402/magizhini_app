package com.voidapp.magizhiniorganics.magizhiniorganics.Firestoreimport android.os.Buildimport android.os.Build.VERSION_CODESimport android.util.Logimport com.google.firebase.auth.FirebaseAuthimport com.google.firebase.database.FirebaseDatabaseimport com.voidapp.magizhiniorganics.magizhiniorganics.data.dao.DatabaseRepositoryimport com.voidapp.magizhiniorganics.magizhiniorganics.data.models.CrashLogimport com.voidapp.magizhiniorganics.magizhiniorganics.data.models.CustomerProfileimport com.voidapp.magizhiniorganics.magizhiniorganics.utils.TimeUtilimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.tasks.awaitimport kotlinx.coroutines.withContextclass Firebase (    private val repository: DatabaseRepository) {    private val firebase by lazy {        FirebaseDatabase.getInstance()    }    private val mFirebaseAuth = FirebaseAuth.getInstance()    // Checks if the current entered phone number is already present in DB before sending the OTP    fun getPhoneNumber(): String? =        mFirebaseAuth.currentUser!!.phoneNumber    private fun getCurrentUserId(): String? =        mFirebaseAuth.currentUser?.uid    suspend fun createNewCustomerProfile() = withContext(Dispatchers.IO) {        val profile = CustomerProfile()        profile.id = getCurrentUserId()!!        val firebaseReference =            firebase.getReference("customerProfiles").child(profile.id)        firebaseReference.setValue(profile)    }    suspend fun uploadUserProfile(profile: CustomerProfile): Boolean = withContext(Dispatchers.IO){        return@withContext try {            val hashMap = mutableMapOf<String, Any>()            hashMap["profileName"] = profile.profileName            hashMap["thumbnailUrl"] = profile.thumbnailUrl            hashMap["phoneNumber"] = profile.phoneNumber            val firebaseReference =                firebase.getReference("customerProfiles").child(profile.id)            firebaseReference.updateChildren(hashMap).await()            true        } catch (e: Exception) {            e.message?.let { logCrash("upload profile", it) }            false        }    }    private suspend fun logCrash(location: String, message: String) {        CrashLog(            getCurrentUserId()!!,            "${ Build.MANUFACTURER } ${ Build.MODEL } ${Build.VERSION.RELEASE} ${ VERSION_CODES::class.java.fields[Build.VERSION.SDK_INT].name }",            TimeUtil().getCustomDate("",System.currentTimeMillis()),            TimeUtil().getTimeInHMS(dateLong = System.currentTimeMillis()),            location,            message        ).let {            try {                firebase.getReference("crashLog")                    .child(getCurrentUserId()!!)                    .setValue(it).await()            } catch (e: Exception) {                Log.e("Magizhini", "logCrash: $it ", )            }        }    }}