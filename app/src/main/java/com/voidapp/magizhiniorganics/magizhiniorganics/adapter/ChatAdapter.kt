package com.voidapp.magizhiniorganics.magizhiniorganics.adapterimport android.content.Contextimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport androidx.recyclerview.widget.DiffUtilimport androidx.recyclerview.widget.RecyclerViewimport com.google.firebase.database.DataSnapshotimport com.google.firebase.database.DatabaseErrorimport com.google.firebase.database.FirebaseDatabaseimport com.google.firebase.database.ValueEventListenerimport com.voidapp.magizhiniorganics.magizhiniorganics.data.models.Messagesimport com.voidapp.magizhiniorganics.magizhiniorganics.data.models.SupportProfileimport com.voidapp.magizhiniorganics.magizhiniorganics.databinding.RvChatItemBindingimport com.voidapp.magizhiniorganics.magizhiniorganics.utils.*import com.voidapp.magizhiniorganics.magizhiniorganics.utils.Constants.STRINGimport com.voidapp.magizhiniorganics.magizhiniorganics.utils.Constants.USER_IDimport com.voidapp.magizhiniorganics.magizhiniorganics.utils.diffUtils.ChatDiffUtilsclass ChatAdapter(    private val context: Context,    var chatItems: ArrayList<Messages>,    private val onItemClickListener: ChatItemListener) : RecyclerView.Adapter<ChatAdapter.ChatViewHolder>() {    inner class ChatViewHolder(val binding: RvChatItemBinding) :        RecyclerView.ViewHolder(binding.root)    private val currentUserId: String = SharedPref(context).getData(USER_ID, STRING, "").toString()    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ChatViewHolder {        val view = RvChatItemBinding.inflate(LayoutInflater.from(parent.context), parent, false)        return ChatViewHolder(view)    }    override fun onBindViewHolder(holder: ChatViewHolder, position: Int) {        val chatItem = chatItems[position]        with(holder.binding) {            tvRecentMessage.visibility = View.VISIBLE            tvStatus.visibility = View.VISIBLE            if (chatItem.type == Constants.TEXT) {                tvRecentMessage.text = chatItem.message            } else if (chatItem.type == Constants.IMAGE) {                tvRecentMessage.text = "image Attachment"            }            //get the user data from the message from id            val userId: String = chatItem.fromId            var toId: String = ""            tvStatus.text = TimeUtil().getTimeAgo(chatItem.timeStamp)            if (currentUserId == userId) {                toId = chatItem.toId                updateSupportData(holder, chatItem.toId)            } else {                toId = chatItem.fromId                updateSupportData(holder, chatItem.fromId)            }            llHeader.setOnClickListener {                getSelectedProfile(toId)            }        }    }    private fun getSelectedProfile(id: String) {        val databaseReference = FirebaseDatabase.getInstance().getReference("customerSupport/$id")        databaseReference.addListenerForSingleValueEvent(object : ValueEventListener {            override fun onDataChange(snapshot: DataSnapshot) {                onItemClickListener.navigateToConversation(snapshot.getValue(SupportProfile::class.java)!!)            }            override fun onCancelled(error: DatabaseError) {}        })    }    private fun updateSupportData(holder: ChatViewHolder, id: String) {        val databaseReference = FirebaseDatabase.getInstance().getReference("customerSupport/$id")        databaseReference.addListenerForSingleValueEvent(object : ValueEventListener {            override fun onDataChange(snapshot: DataSnapshot) {                val recentTextedProfile = snapshot.getValue(SupportProfile::class.java)                if (recentTextedProfile != null) {                    holder.binding.tvProfileName.text = recentTextedProfile.profileName                    holder.binding.ivProfileImage.loadSimple(recentTextedProfile.thumbnailUrl)                }            }            override fun onCancelled(error: DatabaseError) {}        })    }    override fun getItemCount(): Int {        return chatItems.size    }    fun setData(newList: ArrayList<Messages>) {        val chatDiffUtil = ChatDiffUtils(chatItems, newList)        val diffResult = DiffUtil.calculateDiff(chatDiffUtil)        chatItems = newList        diffResult.dispatchUpdatesTo(this)    }    interface ChatItemListener {        fun navigateToConversation(supportProfile: SupportProfile)    }}