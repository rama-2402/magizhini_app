package com.voidapp.magizhiniorganics.magizhiniorganics.ui.customerSupportimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.voidapp.magizhiniorganics.magizhiniorganics.Firestore.FirebaseRepositoryimport com.voidapp.magizhiniorganics.magizhiniorganics.Firestore.FirestoreRepositoryimport com.voidapp.magizhiniorganics.magizhiniorganics.data.dao.DatabaseRepositoryimport com.voidapp.magizhiniorganics.magizhiniorganics.data.entities.UserProfileEntityimport com.voidapp.magizhiniorganics.magizhiniorganics.data.models.Messagesimport com.voidapp.magizhiniorganics.magizhiniorganics.data.models.SupportProfileimport com.voidapp.magizhiniorganics.magizhiniorganics.utils.callbacks.NetworkResultimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.launchimport kotlinx.coroutines.withContextclass ChatViewModel(    private val dbRepository: DatabaseRepository,    private val fsRepository: FirestoreRepository,    private val fbRepository: FirebaseRepository): ViewModel() {    var profile: UserProfileEntity? = null    private var _currentUserProfile: MutableLiveData<UserProfileEntity?> = MutableLiveData()    val currentUserProfile: LiveData<UserProfileEntity?> = _currentUserProfile    private var _recentMessage: MutableLiveData<ArrayList<Messages>> = MutableLiveData()    val recentMessage: LiveData<ArrayList<Messages>> = _recentMessage    private var _supportProfiles: MutableLiveData<ArrayList<SupportProfile>> = MutableLiveData()    val supportProfiles: LiveData<ArrayList<SupportProfile>> = _supportProfiles    private var _navigateToConversation: MutableLiveData<SupportProfile> = MutableLiveData()    val navigateToConversation: LiveData<SupportProfile> = _navigateToConversation    fun getProfileData() = viewModelScope.launch(Dispatchers.IO) {        profile = dbRepository.getProfileData()        withContext(Dispatchers.Main) {            profile?.let {                _currentUserProfile.value = it                listenForRecentMessages(it.id)            } ?: let {                _currentUserProfile.value = null            }        }    }    private suspend fun listenForRecentMessages(userID: String) {        fbRepository.listenForRecentMessages(this@ChatViewModel, userID)    }    fun updateRecentMessages(messages: HashMap<String, Messages>?) {        val message = arrayListOf<Messages>()        if (messages == null) {            _recentMessage.value = message        } else {            message.addAll(messages.values)            message.sortByDescending {                it.timeStamp            }            _recentMessage.value = message        }    }    fun updateProfileStatus(status: Boolean, timestamp: Long = 0L) = viewModelScope.launch {        profile?.id?.let { fbRepository.updateProfileStatus(it, status, timestamp) }    }    fun navigateToConversation(supportProfile: SupportProfile) {        _navigateToConversation.value = supportProfile    }    fun getAllSupportProfiles() = fbRepository.getAllSupportProfiles(this)    fun updateAllSupportProfiles(supportProfiles: ArrayList<SupportProfile>) {        _supportProfiles.value = supportProfiles    }}