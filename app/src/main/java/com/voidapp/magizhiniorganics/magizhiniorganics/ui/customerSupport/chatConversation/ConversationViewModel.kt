package com.voidapp.magizhiniorganics.magizhiniorganics.ui.customerSupport.chatConversationimport android.net.Uriimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport com.voidapp.magizhiniorganics.magizhiniorganics.Firestore.FirebaseRepositoryimport com.voidapp.magizhiniorganics.magizhiniorganics.Firestore.FirestoreRepositoryimport com.voidapp.magizhiniorganics.magizhiniorganics.data.dao.DatabaseRepositoryimport com.voidapp.magizhiniorganics.magizhiniorganics.data.models.Messagesimport com.voidapp.magizhiniorganics.magizhiniorganics.data.models.NotificationDataimport com.voidapp.magizhiniorganics.magizhiniorganics.data.models.PushNotificationimport com.voidapp.magizhiniorganics.magizhiniorganics.data.models.SupportProfileimport java.sql.Timestampclass ConversationViewModel(    private val dbRepository: DatabaseRepository,    private val fsRepository: FirestoreRepository,    private val fbRepository: FirebaseRepository): ViewModel() {    private var _conversation: MutableLiveData<Messages> = MutableLiveData()    val conversation: LiveData<Messages> = _conversation    private var _supportProfileStatus: MutableLiveData<SupportProfile> = MutableLiveData()    val supportProfileStatus: LiveData<SupportProfile> = _supportProfileStatus    private var _keyboardVisibile: MutableLiveData<Boolean> = MutableLiveData()    val keyboardVisibile: LiveData<Boolean> = _keyboardVisibile    var currentUserName: String = ""    fun getConversation(fromId: String, toId: String) = fbRepository.getConversation(this, fromId, toId)    fun sendMessage(message: Messages) {        fbRepository.sendMessage(message)//        createPushNotification(message.message)    }    fun displayChatMessages(messages: Messages) {        _conversation.value = messages    }    fun getSupportProfileUpdates(id: String) = fbRepository.getSupportProfileUpdates(this, id)    fun updateTypingStatus(id: String ,status: Boolean) {        fbRepository.updateTypingStatus(id, status)    }    fun updateProfileStatus(id: String, status: Boolean, timestamp: Long = 0L) = fbRepository.updateProfileStatus(id, status, timestamp)    fun updateSupportProfileStatus(profile: SupportProfile?) {        _supportProfileStatus.value = profile    }    fun uploadImageToStorage(activity: ConversationActivity ,id: String ,data: Uri) {        val path = "users/chat/$id"        fsRepository.uploadImage(activity, path, data)    }    fun hideKeyboard(state: Boolean) {        _keyboardVisibile.value = state    }}